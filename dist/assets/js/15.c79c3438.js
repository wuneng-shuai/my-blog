(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{621:function(e,n,t){"use strict";t.r(n);var a=t(5),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"第三章、vue-js3-的设计思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第三章、vue-js3-的设计思路"}},[e._v("#")]),e._v(" "),t("strong",[e._v("第三章、vue.js3 的设计思路")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("框架的设计里到处都体现了艺术\n")])])]),t("h3",{attrs:{id:"_1、声明式描述-ui"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、声明式描述-ui"}},[e._v("#")]),e._v(" 1、声明式描述 UI")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("vue3 是一个声明式的 UI 框架")])]),e._v(" "),t("li",[t("p",[e._v("使用 JavaStript 对象来来描述 UI")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  const title={\n// 标签名称\n   tag:'h1',\n//标签属性\n    props:{\n    onClick:handler\n},\n//子节点\n  children:[\n   {tag:'span'}\n   ]\n}\n")])])])])]),e._v(" "),t("p",[e._v("对应到Vue.js模版就是")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<h1 @click="handler"><span></span></h1>\n')])])]),t("p",[e._v("使用JavaStript来描述UI 会更加的灵活")]),e._v(" "),t("h3",{attrs:{id:"_2、初识渲染器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、初识渲染器"}},[e._v("#")]),e._v(" 2、初识渲染器")]),e._v(" "),t("p",[e._v("虚拟DOM：就是用JavaScript对象来描述真实的DOM结构")]),e._v(" "),t("p",[e._v("假设我们有如下虚拟DOM")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  const vnode = {\n    // 描述标签名称\n    tag: 'div',\n    // 表述标签的属性\n    props: {\n      onClick: () => alert('hello'),\n    },\n    // 子节点\n    children: 'click me',\n  };\n\n  // 渲染器\n  function renderer (vnode, container)\n  {\n    // 使用vnode.tag作为标签名称创建DOM元素\n    const el = document.createElement(vnode.tag);\n    // 遍历vnode.props 将属性、事件添加到DOM元素\n    for (const key in vnode.props) {\n      if (/^on/.test(key)) {\n        // 如果key以on开头，说明是事件\n        el.addEventListener(\n          key.substr(2).toLowerCase(), //事件名称 onClick----click\n          vnode.props[key] //事件处理函数\n        );\n      }\n    }\n\n    // 处理children\n    if (typeof vnode.children === 'string') {\n      // 如果children是字符串，说明他是元素的子节点\n      el.appendChild(document.createTextNode(vnode.children));\n    } else if (Array.isArray(vnode.children)) {\n      // 递归地调用 renderer函数渲染子节点 使用当前元素el作为挂在点\n      vnode.children.forEach((child) => renderer(child, el));\n    }\n\n    // 将元素添加到挂载电下\n    container.appendChild(el)\n  }\n  renderer(vnode,document.body)\n")])])]),t("p",[e._v("浏览器运行这段代码 会渲染出 click me这段文字 点击文字会弹出 hello")]),e._v(" "),t("h3",{attrs:{id:"_3、组件的本质"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、组件的本质"}},[e._v("#")]),e._v(" 3、组件的本质")]),e._v(" "),t("p",[e._v("本质：组件就是一组DOM元素的封装，可以是一个返回虚拟DOM的函数，也可以是一个对象，但这个对象必须要有一个函数来产出组件要渲染的虚拟DOM")]),e._v(" "),t("h3",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),t("h5",{attrs:{id:"渲染器实现思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染器实现思路"}},[e._v("#")]),e._v(" 渲染器实现思路")]),e._v(" "),t("ul",[t("li",[e._v("创建元素：把vnode.tag作为标签名称来创建DOM元素")]),e._v(" "),t("li",[e._v("为元素添加属性和事件：遍历vnode.props对象，如果key以on字符开头，说明是事件，去掉on调用toLowerCase小写话，最终调用addEventListener绑定事件处理函数")]),e._v(" "),t("li",[e._v("处理children：如果children是数组，递归调用renderer函数继续渲染，父节点为挂载点，如果children是字符串，则使用createTextNode函数创建一个文本节点，并添加到新创建的元素内")]),e._v(" "),t("li",[e._v("渲染器的工作原理，其根本就是利用我们熟悉的DOM操作API来完成渲染的工作")])])])}),[],!1,null,null,null);n.default=r.exports}}]);