(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{623:function(n,e,r){"use strict";r.r(e);var t=r(5),a=Object(t.a)({},(function(){var n=this,e=n.$createElement,r=n._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[r("h1",{attrs:{id:"第二章、框架设计的核心要素"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第二章、框架设计的核心要素"}},[n._v("#")]),n._v(" "),r("strong",[n._v("第二章、框架设计的核心要素")])]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("框架的设计要比想象的更加复杂\n")])])]),r("p",[n._v("1、在开发环境中为用户提供友好的警告信息的同时，不增加成产环境代码的体积。利用Tree-Shaking机智，设置预定义的_DEV_常量")]),n._v(" "),r("p",[n._v("2、Tree-Shaking：指的是消除那些永远不会被执行的代码，也就是排除 dead code")]),n._v(" "),r("p",[n._v("3、使用/"),r("em",[n._v("#___PURE")]),n._v("__*/注释 辅助构建工具Tree-Shaking")]),n._v(" "),r("p",[n._v("4、HTML页面中使用 "),r("code",[n._v("<script>标签引入框架并使用，实现这个需求，我们需要输出格式为IIFE的资源，即'立即调用的函数表达式'")])]),n._v(" "),r("p",[n._v("输出格式为'ESM'资源时，用户可以直接用 "),r("code",[n._v('<script type="module">')]),n._v("标签引入，ESM有两种格式：用于浏览器的会将 "),r("code",[n._v("__DEV__")]),n._v("替换为字面量 "),r("code",[n._v("true")]),n._v("或 "),r("code",[n._v("false")]),n._v("，用于打包工具的会替换为 "),r("code",[n._v("process.env.NODE_ENV !== 'production'")]),n._v("。ESM有两种格")]),n._v(" "),r("p",[n._v("5、用户可以通过特性开关关闭vue中对应的特性，从而减少Tree-Shaking打包体积，列入可以通过：__VUE_OPTIONS_API____开关来关闭optionsAPI 即组件选项api，vue.js中,我们更推荐使用Composition API来编写代码")]),n._v(" "),r("p",[n._v("6、错误处理")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("//utils.js\nlet handlerError = null\nexport default {\n    foo(fn) {\n        // 封装统一的错误处理函数进行报错处理\n        callWithErrorHandling(fn)\n    },\n    //用户可以自定义注册统一的错误处理函数\n    registerErrorHandle(fn) {\n        handlerError = fn\n    }\n}\n\nfunction callWithErrorHandling(fn) {\n    try {\n        fn && fn()\n    } catch (e) {\n        handlerError && handlerError(e)\n    }\n}\n\n\nimport utils form 'utils.js'\n// 注册错误处理程序\nutils.registerErrorHandle((e)=>{\nconsole.log(e)\n})\nutils.foo(()+>{/*..*/})\nutils.bar(()+>{/*..*/})\n\n\n\n// Vue中注册统一的错误处理函数\nimport { createApp } from 'vue'\nimport App from 'App.vue'\nconst app = createApp(App)\napp.config.errorHandler = () => {\n    // 处理报错\n}\n\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);